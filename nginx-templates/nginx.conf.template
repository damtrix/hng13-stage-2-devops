events {
    worker_connections 1024;
}

http {
    # Upstream definitions with failover configuration
    upstream blue_upstream {
        server app-blue:3000 max_fails=1 fail_timeout=5s;
        server app-green:3000 backup;
    }

    upstream green_upstream {
        server app-green:3000 max_fails=1 fail_timeout=5s;
        server app-blue:3000 backup;
    }

    # Dynamic upstream selection based on ACTIVE_POOL
    upstream active_upstream {
        # This will be replaced by the startup script based on ACTIVE_POOL
        server app-blue:3000 max_fails=1 fail_timeout=5s;
        server app-green:3000 backup;
    }

    # Logging
    # Custom log format includes pool/release (from upstream headers), upstream status/address and timings
    # - pool and release are read from upstream response headers: $upstream_http_x_app_pool and $upstream_http_x_release_id
    # - upstream_status, upstream_addr, request_time and upstream_response_time are included for error-rate and latency analysis
    log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                      'status=$status body_bytes_sent=$body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      'pool=$upstream_http_x_app_pool release=$upstream_http_x_release_id '
                      'upstream_status=$upstream_status upstream_addr=$upstream_addr '
                      'request_time=$request_time upstream_response_time=$upstream_response_time';

    # Write access logs into a shared volume so other services (alert_watcher) can tail them
    access_log /var/log/nginx/custom_access.log custom;
    error_log /var/log/nginx/error.log warn;

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Health check endpoint
        location /healthz {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Main application proxy
        location / {
            # Use active upstream based on environment
            proxy_pass http://active_upstream;
            
            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-App-Pool $ACTIVE_POOL;
            
            # Timeout settings for quick failure detection
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            
            # Retry configuration
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
            
            # Preserve all upstream headers
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
            proxy_pass_header Server;
            proxy_pass_header Date;
            proxy_pass_header Content-Type;
            proxy_pass_header Content-Length;
            proxy_pass_header Cache-Control;
            proxy_pass_header Expires;
            proxy_pass_header Last-Modified;
            proxy_pass_header ETag;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
        
        # Version endpoint - needed by demo script
        location /version {
            proxy_pass http://active_upstream/version;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
        }

        # Direct access to Blue service (for chaos testing)
        location /blue/ {
            rewrite ^/blue/(.*) /$1 break;
            proxy_pass http://app-blue:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Direct access to Green service
        location /green/ {
            rewrite ^/green/(.*) /$1 break;
            proxy_pass http://app-green:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
    }

    # Blue service direct access on port 8081
    server {
        listen 8081;
        server_name localhost;

        location / {
            proxy_pass http://app-blue:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Chaos endpoints
        location /chaos/ {
            proxy_pass http://app-blue:3000/chaos/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
    }

    # Green service direct access on port 8082
    server {
        listen 8082;
        server_name localhost;

        location / {
            proxy_pass http://app-green:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Chaos endpoints
        location /chaos/ {
            proxy_pass http://app-green:3000/chaos/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
    }
}